Resources:
  HotelBookingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 'hotelbooking-bucket-${self:custom.stage}'
      WebsiteConfiguration:
        IndexDocument: index.html

  HotelBookingBucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket:
        Ref: "HotelBookingBucket"
      PolicyDocument:
        Statement:
          - Sid: "AllowLambdaWriteAccess"
            Effect: "Allow"
            Principal:
              AWS: 
                Fn::GetAtt: [LambdaRole, Arn] 
            Action:
              - "s3:PutObject"
              - "s3:PutObjectAcl"
              - "s3:GetObject"
              - "s3:GetObjectVersion"
              - "s3:DeleteObject"
              - "s3:DeleteObjectVersion"
            Resource: 
              - "arn:aws:s3:::hotelbooking-bucket-${self:custom.stage}/*"

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: 'HotelBooking-${self:custom.stage}'
      UsernameConfiguration:
        CaseSensitive: false
      AutoVerifiedAttributes:
        - 'email'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: 'WebApp-${self:custom.stage}'
      GenerateSecret: false
      UserPoolId:
        Ref: "CognitoUserPool"
      CallbackURLs:
        - 'http://localhost:8080/hotel/'
      LogoutURLs:
        - 'http://localhost:8080/hotel/'
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO 

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: 'hotelbooking-${self:custom.stage}'
      UserPoolId:
        Ref: "CognitoUserPool"

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Hotels
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: Id
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'HotelBookingLambdaRole-${self:custom.stage}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 'HotelBookingAdminPolicy-${self:custom.stage}'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                  - 'Fn::Join':
                    - ':'
                    -
                      - 'arn:aws:logs'
                      - Ref: 'AWS::Region'
                      - Ref: 'AWS::AccountId'
                      - 'log-group:/aws/lambda/*:*:*'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  'Fn::GetAtt': [ DynamoDBTable, Arn ]
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  'Fn::GetAtt': [ HotelBookingBucket, Arn ]

  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: 'AuthorizerHotelBooking-${self:custom.stage}'
      RestApiId:
        Ref: ApiGatewayRestApi
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - Fn::GetAtt: [ CognitoUserPool, Arn ]
      IdentitySource: method.request.header.Authorization
